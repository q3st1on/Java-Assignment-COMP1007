CLASS Book
    CLASS FIELDS:
        authors (Author[])
        authorCount (int)
        eBook (boolean)
        title (String)
        isbn (String)
        year (String)
        edition (int)

    ACCESSOR: getAuthors
    IMPORT: none
    Export: authors (Author[])
    ASSERTION: Returned copy of authors
    ALGORITHM:
        EXPORT COPY OF authors

    ALTERNATE ALGORITHM:
        RETURN COPY OF authors
    END getAuthors

    ACCESSOR: isEbook
    IMPORT: none
    Export: ebook (boolean)
    ASSERTION: Returned copy of ebook
    ALGORITHM:
        EXPORT COPY OF ebook

    ALTERNATE ALGORITHM:
        RETURN COPY OF ebook
    END isEbook

    ACCESSOR: getTitle
    IMPORT: none
    Export: title (String)
    ASSERTION: Returned copy of title
    ALGORITHM:
        EXPORT COPY OF title

    ALTERNATE ALGORITHM:
        RETURN COPY OF title
    END getTitle

    ACCESSOR: getISBN
    IMPORT: none
    Export: isbn (String)
    ASSERTION: Returned copy of isbn
    ALGORITHM:
        EXPORT COPY OF isbn

    ALTERNATE ALGORITHM:
        RETURN COPY OF isbn
    END getISBN

    ACCESSOR: getYear
    IMPORT: none
    Export: year (String)
    ASSERTION: Returned copy of year
    ALGORITHM:
        EXPORT COPY OF year

    ALTERNATE ALGORITHM:
        RETURN COPY OF year
    END getYear

    ACCESSOR: getEdition
    IMPORT: none
    Export: edition (int)
    ASSERTION: Returned copy of edition
    ALGORITHM:
        EXPORT COPY OF edition

    ALTERNATE ALGORITHM:
        RETURN COPY OF edition
    END getEdition

    ACCESSOR: getAuthorCount
    IMPORT: none
    Export: authorCount (int)
    ASSERTION: Returned copy of authorCount
    ALGORITHM:
        EXPORT COPY OF authorCount

    ALTERNATE ALGORITHM:
        RETURN COPY OF authorCount
    END getAuthorCount
    
    MUTATOR: setEbook
    IMPORT: isEbook (boolean)
    EXPORT: none
    ASSERTION: State of ebook is updated to isEbook
    ALGORITHM:
        ebook = isEbook
    END setEbook  

    MUTATOR: setTitle
    IMPORT: newTitle (String)
    EXPORT: none
    ASSERTION: State of title is updated to newTitle
    ALGORITHM:
        title = newTitle
    END setTitle  

    MUTATOR: setISBN
    IMPORT: newISBN (String)
    EXPORT: none
    ASSERTION: State of isbn is updated to newISBN
    ALGORITHM:
        isbn = newISBN
    END setISBN 

    MUTATOR: setEdition
    IMPORT: newEdition (int)
    EXPORT: none
    ASSERTION: State of edition is updated to newEdition
    ALGORITHM:
        edition = newEdition
    END setEdition 

    MUTATOR: setYear
    IMPORT: newYear (String)
    EXPORT: none
    ASSERTION: State of year is updated to newYear
    ALGORITHM:
        year = newYear
    END setYear

    MUTATOR: addAuthor
    IMPORT: newAuthor (Author)
    EXPORT: none
    ASSERTION: State of authors is updated to include new author
    ALGORITHM:
        IF authorCount < 3 THEN
            unique <- true

            FOR i <- 0 TO authorCount - 1 CHANGEBY 1
                IF newAuthor = authors[i] THEN
                    unique = false
                ENDIF
            ENDFOR

            IF unique THEN
                authors[authorCount] <- newAuthor
                authorCount <- authorCount + 1
            ELSE
                ERROR "Error: Author already added to book!"
            ENDIF
        ELSE
            ERROR "Error: Cannot add more than 3 Authors to a book"
        ENDIF
    END addAuthor

    MUTATOR: overwriteAuthor
    IMPORT: newAuthor (Author), index (int)
    EXPORT: none
    ASSERTION: State of authors is updated to change author at index to newAuthor
    ALGORITHM:
        authors[index] <- newAuthor
    END overwriteAuthor

    MUTATOR: removeAuthor
    IMPORT: index (int)
    EXPORT: none
    ASSERTION: State of authors is updated to remove author at index
    ALGORITHM:
        authors[index] <- null

        FOR i <- index TO authorCount - 2 CHANGEBY 1
            overwriteAuthor(i, authors[i+1])
        ENDFOR

        authors[i] <- null
        authorCount <- authorCount - 1
    END removeAuthor
    
    MUTATOR: pruneAuthors
    IMPORT: authorIndex (int)
    EXPORT: none
    ASSERTION: State of authors is updated to remove duplicates of author at authorIndex
    ALGORITHM:
        duplicate <- false
        FOR i <- 0 TO authorCount - 1 CHANGEBY 1
            IF i != authorIndex THEN
                IF authors[i] = authors[authorIndex] THEN
                    duplicate <- true
                ENDIF
            ENDIF
        ENDFOR

        IF duplicate THEN
            removeAuthor(authorIndex)
        ENDIF
    END pruneAuthors

END Book