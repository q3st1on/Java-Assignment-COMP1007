
/********************************************************************
    * Class variables for the Assignment class:                        *
    * br (BufferedReader)  : BufferedReader object for user input      *
    * books (Book[])       : Array for books inn the library           *
    * authors (Author[])   : Array for authors of books in the libaray *
    ********************************************************************/
private static Book[] books <- new Book[1]
private static Author[] authors <- new Author[1]
private static Input input <- new Input()
private static Printers printers <- new Printers()
private static CSVTools csvTools <- new CSVTools()


METHOD: writeCSV
IMPORT: newAuthor (Author)
EXPORT: None
ALGORITHM:
    IF authors[0] = null THEN
        authors[0] <- newAuthor
    ELSE
        unique <- true
        newAuthorHash <- newAuthor.hashCode()
        FOR EACH Author IN authors
            IF author.hashCode() = newAuthorHash THEN
                unique <- false
                FOR EACH Book IN newAuthor.getBooks()
                    author.addBook(book)
                    FOR  i <- 0 TO book.getAuthorCount() - 1 CHANGEBY i++
                        IF book.getAuthors()[i] = newAuthor THEN
                            book.overwriteAuthor(i, author)
                        ENDIF
                    ENDFOR
                ENDFOR
            ENDIF
        ENDFOR
    ENDIF
    IF unique THEN
        authors.append(newAuthor)
    ENDIF
END addAuthors
        
    


METHOD: pruneAuthors
IMPORT: checkAuthor (Author)
EXPORT: None
ALGORITHM:
    checkAuthorHash <- checkAuthor.hashCode()
    FOR testAuthorIndex <- 0 TO authors.length - 1 CHANGEBY 1
        IF authors[testAuthorIndex].hashCode() = checkAuthorHash THEN
            IF authors[testAuthorIndex] != checkAuthor THEN
                IF checkAuthor.getBooks() = authors[testAuthorIndex].getBooks() THEN
                    deleteAuthor(testAuthorIndex)
                ELSE
                    checkAuthorIndex <- getAuthorIndex(checkAuthor)
                    checkAuthorBooks <- checkAuthor.getBooks().length
                    testAuthorBooks <- authors[testAuthorIndex].getBooks().length
                    
                    IF testAuthorBooks > checkAuthorBooks THEN
                        deleteAuthor(checkAuthorIndex)
                    ELSE
                        deleteAuthor(testAuthorIndex)
                    ENDIF
                ENDIF
            ENDIF
        ENDIF
    ENDFOR
END pruneAuthors
                
METHOD: getAuthorIndex
IMPORT: checkAuthor (Author)
EXPORT: index (int)
ALGORITHM:
    index <- 0
    FOR  i <- 0  TO authors.length - 1 CHANGEBY 1 
        IF authors[i] = checkAuthor THEN
            index <- i
            i <- authors.length
        ENDIF
    ENDFOR
END getAuthorIndex

METHOD: deleteAuthor
IMPORT: authorIndex (int)
EXPORT: none
ALGORITHM:
    authors[authorIndex] <- null

    FOR i <- authorIndex TO authors.length - 2 CHANGEBY 1
        authors[i] <- authors[i+1]
    END FOR

    authors[i] <- null
    authors.pop()
END deleteAuthor


METHOD: genBooks
IMPORT: CSVData (String[])
EXPORT: none
ALGORITHM:
    IF csvTools.verifyHeader(csvData[0]) THEN
        ERROR "Incorrect Data File: CSV header is incorrect."
    ENDIF
    FOR  i <- 1 TO csvData.length - 1 CHANGEBY 1 
        newBook.setTitle(csvData[i][0])
        newBook.setYear(csvData[i][13])
        newBook.setISBN(csvData[i][14])
        newBook.setEbook(csvData[i][15] = "TRUE")
        newBook.setEdition(Integer.parseInt(csvData[i][16]))
        FOR  j <- 0 TO 3 CHANGEBY 1
            IF csvData[i][1+(j*4)] != "" THEN
                newAuthor.setLastName(csvData[i][1 + (j*4)])
                newAuthor.setFirstName(csvData[i][2 + (j*4)])
                newAuthor.setNationality(csvData[i][3 + (j*4)])
                newAuthor.setBirthYear(csvData[i][4 + (j*4)])
                newAuthor.addBook(newBook)
                newBook.addAuthor(newAuthor)
                addAuthors(newAuthor)
            ENDIF
        ENDFOR
        books.append(newBook)
    ENDFOR
END genBooks

METHOD: booksByAuthor
IMPORT: none
EXPORT: none
ALGORITHM:
    PRINT "************************************"
    PRINT "          Books by Author           "
    PRINT "************************************"
    PRINT "List of Authors:"

    FOR  i <- 0 TO authors.length - 1 CHANGEBY 1
        PRINT i+1 + " > " authors[i]
    ENDFOR

    PRINT "Select an Author: "

    input <- 0
    GET input

    bookPrinter(authors[input].getBooks())

    PRINT "************************************"
END booksByAuthor

METHOD: eBooks
IMPORT: none
EXPORT: none
ALGORITHM:
    PRINT "************************************"
    PRINT "               eBooks               "
    PRINT "************************************"

    foundBooks <- []
    
    FOR EACH book IN books
        IF book.isEbook() THEN
            foundBooks.append(book)
        ENDIF
    ENDFOR

    bookPrinter(foundBooks)

    PRINT "************************************"
END ebook

METHOD: noneBooks
IMPORT: none
EXPORT: none
ALGORITHM:
    PRINT "************************************"
    PRINT "             Non-eBooks             "
    PRINT "************************************"

    foundBooks <- []
    
    FOR EACH book IN books
        IF !book.isEbook() THEN
            foundBooks.append(book)
        ENDIF
    ENDFOR

    bookPrinter(foundBooks)

    PRINT "************************************"
END noneBooks

METHOD: addBook
IMPORT: none
EXPORT: none
ALGORITHM:
    PRINT "************************************"
    PRINT "              Add Book              "
    PRINT "************************************" 

    Book newBook <- new Book()

    PRINT "Enter Book Title: "
    input <- ""
    GET input
    newBook.setTitle(input)

    PRINT "Enter Book Year: "
    input <- ""
    GET input
    newBook.setYear(input)

    PRINT "Enter Book ISBN: "
    input <- ""
    GET input
    newBook.setISBN(input)

    PRINT "Enter Book Edition: "
    input <- 0
    GET input
    newBook.setEdition(input)

    PRINT "Is Book an eBook (y/n)? "
    input <- ""
    GET input
    input <- input.toLowerCASE()
    IF reply = "y" OR reply = "yes" OR reply = "t" OR reply = "true" THEN
        newBook.setEbook(true)
    ELSE
        newBook.setEbook(false)
    ENDIF

    PRINT "How many Authors are there?"
    input <- 0
    GET input
    FOR i <- 0 TO input - 1 CHANGEBY 1
        addAuthorPrompt(newBook)
    ENDFOR

    books.append(newBook)

    PRINT "************************************"
END addBook

METHOD: addAuthorPrompt
IMPORT: book (Book)
EXPORT: none
ALGORITHM:
    IF book.getAuthorCount() >= 3 THEN
        ERROR "Error: Cannot add more than 3 authors!"
    ENDIF

    PRINT "************************************"
    PRINT "             Add Author             "
    PRINT "************************************"

    PRINT "Enter Author First Name: "
    input <- ""
    GET input
    newAuthor.setFirstName(input)

    PRINT "Enter Author Last Name: "
    input <- ""
    GET input
    newAuthor.setLastName(input)

    PRINT "Enter Author Nationality: "
    input <- ""
    GET input
    newAuthor.setNationality(input)

    PRINT "Enter Author Birth Year: "
    input <- ""
    GET input
    newAuthor.setBirthYear(input)

    newAuthor.addBook(book)
    book.addAuthor(newAuthor)

    addAuthors(newAuthor)
    
    PRINT "************************************"
END addAuthorPrompt

METHOD: editAuthor
IMPORT: bookIndex (int)
EXPORT: none
ALGORITHM:
    PRINT "************************************"
    PRINT "            Edit Author             "
    PRINT "************************************"

    loop <- true

    PRINT "List of Authors:"

    FOR  i <- 0 TO books[bookIndex].getAuthorCount() - 1 CHANGEBY 1
        PRINT "Author " + i+1
        PRINT i+1 + " > Name: " + books[bookIndex].getAuthors()[i].getFirstName() + books[bookIndex].getAuthors()[i].getLastName()
        PRINT i+1 + " > Nationality: " + books[bookIndex].getAuthors()[i].getNationality()
        PRINT i+1 + " > Born: " + books[bookIndex].getAuthors()[i].getBirthYear()
    ENDFOR

    PRINT "Select an Author: "
    input <- 0
    GET input
    authorIndex <- input - 1
    WHILE loop DO
        SWITCH printAuthorEditMenu(input, books[bookIndex].getAuthors()[authorIndex]) OF
            CASE 1
                PRINT "Enter new first name: "
                input <- ""
                GET input
                books[bookIndex].getAuthors()[authorIndex].setFirstName(input)
            ENDCASE
            CASE 2
                PRINT "Enter new last name: "
                input <- ""
                GET input
                books[bookIndex].getAuthors()[authorIndex].setLastName(input)
            ENDCASE            ENDCASE
            CASE 3
                PRINT "Enter new birth year: "
                input <- "
                GET input
                books[bookIndex].getAuthors()[authorIndex].setBirthYear(input)
            ENDCASE
            CASE 4
                PRINT "Enter new nationality: "
                input <- ""
                GET input
                books[bookIndex].getAuthors()[authorIndex].setNationality(input)
            ENDCASE
            CASE 5
                loop <- false
            ENDCASE
            DEFAULT
                ERROR "Please choose a valid menu option (enter 1-5)"
        ENDSWITCH
    ENDWHILE

    books[bookIndex].pruneAuthors(authorIndex)

    FOR i <- 0 TO books[bookIndex].getAuthorCount() - 1 CHANGEBY 1
        pruneAuthors(books[bookIndex].getAuthors()[i])
    ENDFOR
END editAuthor
    
METHOD: removeAuthorPrompt
IMPORT: bookIndex (int)
EXPORT: none
ALGORITHM:
    FOR  i <- 0 TO books[bookIndex].getAuthorCount() - 1 CHANGEBY 1
        PRINT i+1 +"Author "
        PRINT i+1 + " > Name: " + books[bookIndex].getAuthors()[i].toString()
        PRINT i+1 + " > Nationality: " + books[bookIndex].getAuthors()[i].getNationality()
        PRINT i+1 + " > Born: " + books[bookIndex].getAuthors()[i].getBirthYear()
    ENDFOR

    PRINT "Select an author to remove: "

    input <- 0
    GET input

    books[bookIndex].removeAuthor(input)
END removeAuthorPrompt


METHOD: editBook
IMPORT: none
EXPORT: none
ALGORITHM:
    loop <- true

    PRINT "************************************"
    PRINT "            Select Book             "
    PRINT "************************************" 
    PRINT "List of Books:"

    FOR  i <- 0 TO books.length - 1 CHANGEBY 1
        PRINT "Book " + i+1
        PRINT i+1 + " > Title: " + books[i].getTitle()
        PRINTi+1 +  " > Published: " + books[i].getYear()
        PRINT i+1 + " > ISBN: " + books[i].getISBN()
        PRINT i+1 + " > eBook: " + books[i].isEbook()
        PRINT i+1 + " > Edition: " + books[i].getEdition()

        FOR  j <- 0 TO books[i].getAuthorCount() - 1 CHANGEBY 1
            PRINT i+1 + " > Author:"
            PRINT i+1 + " >  Name: " books[i].getAuthors()[j].getFirstName() + " " + books[i].getAuthors()[j].getLastName()
            PRINT i+1 + " >  Nationality: " + books[i].getAuthors()[j].getNationality()
            PRINT i+1 + " >  Born: " + books[i].getAuthors()[j].getBirthYear()
        ENDFOR
    ENDFOR
    
    PRINT "Select a book: "

    input <- 0
    GET input
    bookIndex <- input - 1

    PRINT "************************************") 

    WHILE loop DO
        SWITCH printBookEditMenu(input, books[bookIndex]) OF
            CASE 1
                addAuthorPrompt(books[bookIndex])
            ENDCASE
            CASE 2
                removeAuthorPrompt(bookIndex)
            ENDCASE
            CASE 3
                editAuthor(bookIndex)
            ENDCASE
            CASE 4
                PRINT "Enter new title: "
                input <- ""
                GET input
                books[bookIndex].setTitle(input)
            ENDCASE
            CASE 5
                PRINT "Enter new year of publication: "
                input <- 0
                GET input
                books[bookIndex].setYear(String.valueOf(input))
            ENDCASE
            CASE 6
                PRINT "Enter new Edition: "
                input <- ""
                GET input
                books[bookIndex].setEdition(input)
            ENDCASE
            CASE 7
                PRINT "Enter new ISBN: "
                input <- ""
                GET input
                books[bookIndex].setISBN(input)
            ENDCASE                
            CASE 8
                books[bookIndex].setEbook(!books[bookIndex].isEbook())
            ENDCASE
            CASE 9
                deleteBook(bookIndex)
                loop <- false
            ENDCASE
            CASE 10
                loop <- false
            ENDCASE
            DEFAULT
                ERROR "Please choose a valid menu option (enter 1-9)"
        ENDSWITCH
    ENDWHILE
    
    PRINT "************************************"
END editBook

METHOD: deleteBook
IMPORT: bookIndex (int)
EXPORT: none
ALGORITHM:
    books[bookIndex] <- null
    
    FOR EACH i <- bookIndex  TO books.length - 2 CHANGEBY 1
        books[i] <- books[i+1]
    ENDFOR

    books[i] <- null
    books.pop()
END deleteBook

METHOD: printAllBooks
IMPORT: none
EXPORT: none
ALGORITHM:
    PRINT "************************************"
    PRINT "             All Books              "
    PRINT "************************************"
    PRINT "List of Books:"
    bookPrinter(books)
    PRINT "************************************"
END printAllBooks



/*****************************************************
    * Name   : handleArgs                               *
    * Date   : 08/10/2024                               *
    * Import : args (String[])                          *
    * Export : value (boolean)                          *
    * Purpose: Handle user arguments (if supplied).     *
    *          Allows users to specify alternate data   *
    *          file locations.                          *
    *****************************************************/
METHOD: handleArgs
IMPORT: args (String[])  
EXPORT: value (boolean)
ALGORITHM:
    value <- false

    IF args.length = 0 THEN
        value <- true
        return
    ENDIF

    IF args[0] = "-h" OR args[0] = "--help" THEN
        printHelpPrompt()
        value <- false
        return
    ENDIF
    

    IF (args[0] = "-f")) OR (args[0] = "--file")))
    
        IF args.length = 1) 
        
            PRINT "Error: please specify data file location when using file flag.")
            return false
        

        PRINT "Reading from data file ", args[1])
        try 
            File dataFile <- new File(args[1])
        
            IF dataFile.exists())
            
                csvTools.setFilePath(args[1])
                return true
            
            ELSE
            
                PRINT "Error: Could not open file located at ", args[1])
                return false
            
        
        catch (Exception e)
        
            PRINT "Error opening file %s:\n", args[1])
            PRINT e.getMessage())
            return false
        
    

    PRINT "Error: unknown flags provided.")
    PRINT "Printing usage information...")
    printers.printHelpPrompt()
    return false


/*****************************************************
    * Name   : main                                     *
    * Date   : 08/10/2024                               *
    * Import : None                                     *
    * Export : None                                     *
    * Purpose: read in data file, generate library book *
    *          arrays then loop through menu prompt     *
    *          until user exits.                        *
    *****************************************************/
public static void main(String[] args)

    IF handleArgs(args))
    
        try
        
            String[][] CSVData <- csvTools.csvReader()
            genBooks(CSVData)

            boolean loop <- true
            while (loop)
            
                switch (printers.printMenu(input)) 
                    CASE 0:
                        clearScreen()
                    ENDCASE
                    CASE 1:
                        printAllBooks()
                    ENDCASE        
                    CASE 2:
                        eBooks()
                    ENDCASE        
                    CASE 3:
                        noneBooks()
                    ENDCASE        
                    CASE 4:
                        booksByAuthor()
                    ENDCASE        
                    CASE 5:
                        addBook()
                        csvTools.writeCSV(books)
                    ENDCASE        
                    CASE 6:
                        editBook()
                        csvTools.writeCSV(books)
                    ENDCASE
                    CASE 7:
                        loop <- false
                    ENDCASE                        
                    default:
                        System.err.println("Please choose a valid menu option (enter 1-7)")
                        
                
            
            csvTools.writeCSV(books)
            PRINT "Thank you for using the system!") 
        
        catch (Exception e)
        
            e.printStackTrace()
        
    

